#!/usr/bin/env python2

import subprocess
import os
import re
import pwd, grp
import random, string
import shutil

import salt.exceptions

config = {
  'port': 5665,
  'user': 'nagios',
  'group': 'nagios',
  'dirbase': '/etc/icinga2',
  'pkibase': '/etc/icinga2/pki',
}

file_constants = config['dirbase'] + "/constants.conf"
file_zones = config['dirbase'] + "/zones.conf"

#use this string in conjunction with printf
# replace with the following variables
zones_master = """
# This file is generated by icinga2 saltmodule
object Endpoint "{host}" {{
}}
object Zone "{zone}" {{
        //this is the local node
        endpoints = [ "{host}" ]
        // allow zone config synchronisation
        global = true
}}"""

def master(name, master=None, master_zone=None, port=config['port'], overwrite=False):
	def ensure_dir(f):
		d = os.path.dirname(f)
		if not os.path.exists(d):
			ensure_dir(d)
			os.makedirs(d)
	ret = {}
	ret['name'] = name
	ret['changes'] = {}
	ret['result'] = True
	ret['comment'] = "No changes were made."

	if master_zone is None:
		master_zone = name
	if master is None:
		master = name

	key_master_pub = config['pkibase'] + "/" + master + ".pub"
	key_master_pri = config['pkibase'] + "/" + master + ".key"
	key_master_crt = config['pkibase'] + "/" + master + ".crt"
	key_master_csr = config['pkibase'] + "/" + master + ".csr"

	key_master_ca_crt = "/var/lib/icinga2/ca/ca.crt"
	key_master_ca_key = "/var/lib/icinga2/ca/ca.key"

	ensure_dir(key_master_csr)
	os.fchown(os.open( config['pkibase'], os.O_RDONLY ), pwd.getpwnam(config['user']).pw_uid, grp.getgrnam(config['group']).gr_gid)

	try:
		if overwrite or not (os.path.isfile(key_master_ca_crt) and os.path.isfile(key_master_ca_key)):
			ret['changes'][key_master_ca_key] = {'old': os.path.isfile(key_master_ca_key)}
			ret['changes'][key_master_ca_crt] = {'old': os.path.isfile(key_master_ca_crt)}
			subprocess.check_output([
			"icinga2",
				"pki",
				"new-ca",
			], stderr=subprocess.STDOUT)

			shutil.copyfile(key_master_ca_crt, config['pkibase'] + "/ca.crt")

			ret['changes'][key_master_ca_key]['new'] = os.path.isfile(key_master_ca_key)
			ret['changes'][key_master_ca_crt]['new'] = os.path.isfile(key_master_ca_crt)

		if overwrite or not (os.path.isfile(key_master_pri) and os.path.isfile(key_master_crt)):
			ret['changes'][key_master_pri] = {'old': os.path.isfile(key_master_pri)}
			ret['changes'][key_master_csr] = {'old': os.path.isfile(key_master_csr)}
			subprocess.check_output([
			"icinga2",
				"pki",
				"new-cert",
				"--cn", master,
				"--key", key_master_pri,
				"--csr", key_master_csr,
			], stderr=subprocess.STDOUT)
			ret['changes'][key_master_pri]['new'] = os.path.isfile(key_master_pri)
			ret['changes'][key_master_csr]['new'] = os.path.isfile(key_master_csr)

		if overwrite or not (os.path.isfile(key_master_pri) and os.path.isfile(key_master_csr)):
			ret['changes'][key_master_pri] = {'old': os.path.isfile(key_master_pri)}
			ret['changes'][key_master_csr] = {'old': os.path.isfile(key_master_csr)}
			subprocess.check_output([
			"icinga2",
				"pki",
				"new-cert",
				"--cn", master,
				"--key", key_master_pri,
				"--csr", key_master_csr,
			], stderr=subprocess.STDOUT)
			ret['changes'][key_master_pri]['new'] = os.path.isfile(key_master_pri)
			ret['changes'][key_master_csr]['new'] = os.path.isfile(key_master_csr)

		if overwrite or not os.path.isfile(key_master_crt):
			ret['changes'][key_master_crt] = {'old': os.path.isfile(key_master_crt)}
			subprocess.check_output([
			"icinga2",
				"pki",
				"sign-csr",
				"--csr", key_master_csr,
				"--cert", key_master_crt,
			], stderr=subprocess.STDOUT)
			ret['changes'][key_master_crt]['new'] = os.path.isfile(key_master_crt)

		# TODO create zones.conf
		# TODO: make this actually regard the changes-feature of salt
		# right now, it just copies the data, regardlessly if the file actually has to get updated
		f = open(file_zones, 'w')
		f.write(zones_master.format(host=master, zone=master_zone))

		# Change the constants.conf
		f = open(file_constants)
		newlines = []
		write_file = False

		node_r = re.compile('const\s+NodeName\s*=\s*"?([^"]*)"?')
		zone_r = re.compile('const\s+ZoneName\s*=\s*"?([^"]*)"?')
		salt_r = re.compile('const\s+TicketSalt\s*=\s*"?([^"]*)"?')
		node_ok = False
		zone_ok = False
		salt_ok = False
		for line in f:
			if node_r.match(line) and not (node_r.match(line).group(1) == master):
				print "change line node from %s to %s" % (node_r.match(line).group(1), master)
				write_file = True
				ret['changes']["NodeName"] = {'old': node_r.match(line).group(1)}
				newlines.append('const NodeName = "{node}"\n'.format(node=master))
				ret['changes']["NodeName"]['new'] = master
				node_ok = True
			elif node_r.match(line) and (node_r.match(line).group(1) == master):
				newlines.append(line)
				node_ok = True
			elif zone_r.match(line) and not (zone_r.match(line).group(1) == master):
				print "change line zone from %s to %s" % (zone_r.match(line).group(1), master)
				write_file = True
				ret['changes']["ZoneName"] = {'old': zone_r.match(line).group(1)}
				newlines.append('const ZoneName = "{zone}"\n'.format(zone=master))
				ret['changes']["ZoneName"]['new'] = master
				zone_ok = True
			elif zone_r.match(line) and (zone_r.match(line).group(1) == master):
				newlines.append(line)
				zone_ok = True
			elif salt_r.match(line) and salt_r.match(line).group(1) == '':
				print "change line salt " + salt_r.match(line).group(1)
				write_file = True
				ret['changes']["TicketSalt"] = {'old': salt_r.match(line).group(1)}
				myRand = ''.join(random.choice(string.ascii_letters + string.digits) for i in range(16))
				newlines.append('const TicketSalt = "{salt}"\n'.format(salt=myRand))
				ret['changes']["TicketSalt"]['new'] = myRand
				salt_ok = True
			elif salt_r.match(line) and not salt_r.match(line).group(1) == '':
				newlines.append(line)
				salt_ok = True
			else:
				newlines.append(line)
		if not node_ok:
			print "node not ok"
			write_file = True
			ret['changes']["NodeName"] = {'old': False}
			newlines.append('const NodeName = "{node}"\n'.format(node=master))
			ret['changes']["NodeName"]['new'] = True
			node_ok = True
		if not zone_ok:
			print "zone not ok"
			write_file = True
			ret['changes']["ZoneName"] = {'old': False}
			newlines.append('const ZoneName = "{zone}"\n'.format(zone=master))
			ret['changes']["ZoneName"]['new'] = True
			zone_ok = True
		if not salt_ok:
			print "salt not ok"
			write_file = True
			ret['changes']["TicketSalt"] = {'old': False}
			myRand = ''.join(random.choice(string.ascii_letters + string.digits) for i in range(16))
			newlines.append('const TicketSalt = "{salt}"\n'.format(salt=myRand))
			ret['changes']["TicketSalt"]['new'] = True
			salt_ok = True

		if write_file:
			constants_fh = open(file_constants, 'w')
			for line in newlines:
				constants_fh.write(line)
			constants_fh.close()

	except subprocess.CalledProcessError as e:
		ret['result'] = False
		ret['comment'] = "Icinga2 setup failed at step '{0}' with output:\n\n{1}".format(' '.join(e.cmd), e.output)
	return ret


def client(name, ticket, master=None, client=None, client_zone=None, master_zone=None, port=config['port'], overwrite=False):
	def ensure_dir(f):
		d = os.path.dirname(f)
		if not os.path.exists(d):
			ensure_dir(d)
			os.makedirs(d)
	ret = {}
	ret['name'] = name
	ret['changes'] = {}
	ret['result'] = True
	ret['comment'] = "No changes were made."

	if client is None:
		client = __grains__['host']

	if master is None:
		master = name
	if master_zone is None:
		master_zone = name
	if client_zone is None:
		client_zone = client
	if ticket is None:
		ret['result'] = False
		return ret


	key_client_pub = config['pkibase'] + "/" + client + ".pub"
	key_client_pri = config['pkibase'] + "/" + client + ".key"
	key_client_crt = config['pkibase'] + "/" + client + ".crt"
	key_master_crt = config['pkibase'] + "/trusted_master.crt"

	ca_crt = config['pkibase'] + "/ca.crt"

	# TODO: neccessary?
	if ticket is None or ticket is "":
		ret['result'] = False
		ret['comment'] = "No ticket to pass to master."
		return ret

	ensure_dir(key_client_crt)
	os.fchown(os.open( config['pkibase'], os.O_RDONLY ), pwd.getpwnam(config['user']).pw_uid, grp.getgrnam(config['group']).gr_gid)

	try:
		# activate the API plugin
		if None is re.compile(r'^Enabled.*api', re.MULTILINE).search(
			subprocess.check_output(["icinga2", "feature","list"],
				stderr=subprocess.STDOUT)):

			ret['changes']["Api enabled"] = {'old': False, 'new': True}
			subprocess.check_output([
			"icinga2",
				"feature",
				"enable",
				"api",
			], stderr=subprocess.STDOUT)

		# Create a new client certificate
		if overwrite or not (	os.path.isfile(key_client_pri)
							 and os.path.isfile(key_client_crt)):

			ret['changes'][key_client_pri] = {'old': os.path.isfile(key_client_pri)}
			ret['changes'][key_client_crt] = {'old': os.path.isfile(key_client_crt)}

			subprocess.check_output([
			"icinga2",
				"pki",
				"new-cert",
				"--cn", client,
				"--key", key_client_pri,
				"--cert", key_client_crt,
			], stderr=subprocess.STDOUT)

			ret['changes'][key_client_pri]['new'] = os.path.isfile(key_client_pri)
			ret['changes'][key_client_crt]['new'] = os.path.isfile(key_client_crt)


		# grab the certificate from master
		if overwrite or not os.path.isfile(key_master_crt):

			ret['changes'][key_master_crt] = { 'old': os.path.isfile(key_master_crt)}

			subprocess.check_output([
			"icinga2",
				"pki",
				"save-cert",
				"--key", key_client_pri,
				"--cert", key_client_crt,
				"--host", master,
				"--port", str(port),
				"--trustedcert", key_master_crt,
			], stderr=subprocess.STDOUT)

			ret['changes'][key_master_crt]['new'] = os.path.isfile(key_master_crt)


		# grab the CA from master
		if overwrite or not os.path.isfile(ca_crt):

			ret['changes'][ca_crt] = {'old': os.path.isfile(ca_crt)}

			subprocess.check_output([
			"icinga2",
				"pki",
				"request",
				"--host", master,
				"--port", str(port),
				"--trustedcert", key_master_crt,
				"--ticket", ticket,
				"--key", key_client_pri,
				"--cert", key_client_crt,
				"--ca", ca_crt,
			], stderr=subprocess.STDOUT)

			ret['changes'][ca_crt]['new'] = os.path.isfile(ca_crt)
		
			# after everything finished, create the node
			subprocess.check_output([
			"icinga2",
				"node",
				"setup",
				"--accept-config",
				"--accept-commands",
				"--zone", client_zone,
				"--endpoint", master + "," + master + "," + str(port),
				"--master_host", master,
				"--master_zone", master_zone,
				"--ticket", ticket,
				"--trustedcert", key_master_crt,
				"--cn", client,
			], stderr=subprocess.STDOUT)
			
			ret['comment'] = "Icinga2 setup successfully finished!"

	except subprocess.CalledProcessError as e:
		ret['result'] = False
		ret['comment'] = "Icinga2 setup failed at step '{0}' with output:\n\n{1}".format(' '.join(e.cmd), e.output)
		return ret

	return ret
